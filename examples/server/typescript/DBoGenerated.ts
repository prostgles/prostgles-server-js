/* This file was generated by Prostgles 
* Wed, 07 Oct 2020 20:11:06 GMT 
*/

export type FieldFilter = object | string[] | "*" | "";
export type OrderBy = { key: string, asc: boolean }[] | { [key: string]: boolean }[] | string | string[];
        
export type SelectParams = {
    select?: FieldFilter;
    limit?: number;
    offset?: number;
    orderBy?: OrderBy;
    expectOne?: boolean;
}
export type UpdateParams = {
    returning?: FieldFilter;
    onConflictDoNothing?: boolean;
    fixIssues?: boolean;
    multi?: boolean;
}
export type InsertParams = {
    returning?: FieldFilter;
    onConflictDoNothing?: boolean;
    fixIssues?: boolean;
}
export type DeleteParams = {
    returning?: FieldFilter;
};

type Items = {
     name?: string;
     id?: number;
};

type DBO_items = {
    find: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Items[]>;
   findOne: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Items>;
   subscribe: (filter: object, params: SelectParams, onData: (items: Items[]) => any) => { unsubscribe: () => any };
   count: (filter?: object) => Promise<number>;
   update: (filter: object, newData: Items, params?: UpdateParams) => Promise<void | Items>;
   upsert: (filter: object, newData: Items, params?: UpdateParams) => Promise<void | Items>;
   insert: (data: (Items | Items[]), params?: InsertParams) => Promise<void | Items>;
   delete: (filter: object, params?: DeleteParams) => Promise<void | Items>; 
};

export type DBObj = {
 items: DBO_items;
};
