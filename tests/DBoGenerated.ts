/* This file was generated by Prostgles 
* Tue, 24 Nov 2020 02:42:38 GMT 
*/

export type FieldFilter = object | string[] | "*" | "";
export type OrderBy = { key: string, asc: boolean }[] | { [key: string]: boolean }[] | string | string[];
        
export type SelectParams = {
    select?: FieldFilter;
    limit?: number;
    offset?: number;
    orderBy?: OrderBy;
    expectOne?: boolean;
}
export type UpdateParams = {
    returning?: FieldFilter;
    onConflictDoNothing?: boolean;
    fixIssues?: boolean;
    multi?: boolean;
}
export type InsertParams = {
    returning?: FieldFilter;
    onConflictDoNothing?: boolean;
    fixIssues?: boolean;
}
export type DeleteParams = {
    returning?: FieldFilter;
};

type Items = {
     name?: string;
     h?: Array<string>;
     id?: number;
};
type Items2 = {
     id?: number;
     hh?: Array<string>;
     name?: string;
};
type Items3 = {
     h?: Array<string>;
     name?: string;
     id?: number;
};
type Table = {
     id?: string;
};
type Transaction = {
     id?: string;
};

type DBO_items = {
    find: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Items[]>;
   findOne: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Items>;
   subscribe: (filter: object, params: SelectParams, onData: (items: Items[]) => any) => { unsubscribe: () => any };
   subscribeOne: (filter: object, params: SelectParams, onData: (item: Items) => any) => { unsubscribe: () => any };
   count: (filter?: object) => Promise<number>;
   update: (filter: object, newData: Items, params?: UpdateParams) => Promise<void | Items>;
   upsert: (filter: object, newData: Items, params?: UpdateParams) => Promise<void | Items>;
   insert: (data: (Items | Items[]), params?: InsertParams) => Promise<void | Items>;
   delete: (filter: object, params?: DeleteParams) => Promise<void | Items>; 
};
type DBO_items2 = {
    find: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Items2[]>;
   findOne: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Items2>;
   subscribe: (filter: object, params: SelectParams, onData: (items: Items2[]) => any) => { unsubscribe: () => any };
   subscribeOne: (filter: object, params: SelectParams, onData: (item: Items2) => any) => { unsubscribe: () => any };
   count: (filter?: object) => Promise<number>;
   update: (filter: object, newData: Items2, params?: UpdateParams) => Promise<void | Items2>;
   upsert: (filter: object, newData: Items2, params?: UpdateParams) => Promise<void | Items2>;
   insert: (data: (Items2 | Items2[]), params?: InsertParams) => Promise<void | Items2>;
   delete: (filter: object, params?: DeleteParams) => Promise<void | Items2>; 
};
type DBO_items3 = {
    find: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Items3[]>;
   findOne: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Items3>;
   subscribe: (filter: object, params: SelectParams, onData: (items: Items3[]) => any) => { unsubscribe: () => any };
   subscribeOne: (filter: object, params: SelectParams, onData: (item: Items3) => any) => { unsubscribe: () => any };
   count: (filter?: object) => Promise<number>;
   update: (filter: object, newData: Items3, params?: UpdateParams) => Promise<void | Items3>;
   upsert: (filter: object, newData: Items3, params?: UpdateParams) => Promise<void | Items3>;
   insert: (data: (Items3 | Items3[]), params?: InsertParams) => Promise<void | Items3>;
   delete: (filter: object, params?: DeleteParams) => Promise<void | Items3>; 
};
type DBO_table = {
    find: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Table[]>;
   findOne: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Table>;
   subscribe: (filter: object, params: SelectParams, onData: (items: Table[]) => any) => { unsubscribe: () => any };
   subscribeOne: (filter: object, params: SelectParams, onData: (item: Table) => any) => { unsubscribe: () => any };
   count: (filter?: object) => Promise<number>;
   update: (filter: object, newData: Table, params?: UpdateParams) => Promise<void | Table>;
   upsert: (filter: object, newData: Table, params?: UpdateParams) => Promise<void | Table>;
   insert: (data: (Table | Table[]), params?: InsertParams) => Promise<void | Table>;
   delete: (filter: object, params?: DeleteParams) => Promise<void | Table>; 
};
type DBO_transaction = {
    find: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Transaction[]>;
   findOne: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Transaction>;
   subscribe: (filter: object, params: SelectParams, onData: (items: Transaction[]) => any) => { unsubscribe: () => any };
   subscribeOne: (filter: object, params: SelectParams, onData: (item: Transaction) => any) => { unsubscribe: () => any };
   count: (filter?: object) => Promise<number>;
   update: (filter: object, newData: Transaction, params?: UpdateParams) => Promise<void | Transaction>;
   upsert: (filter: object, newData: Transaction, params?: UpdateParams) => Promise<void | Transaction>;
   insert: (data: (Transaction | Transaction[]), params?: InsertParams) => Promise<void | Transaction>;
   delete: (filter: object, params?: DeleteParams) => Promise<void | Transaction>; 
};

export type DBObj = {
 items: DBO_items;
 items2: DBO_items2;
 items3: DBO_items3;
 table: DBO_table;
 transaction: DBO_transaction;
};
