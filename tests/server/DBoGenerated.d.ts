/* This file was generated by Prostgles 
*/ 

 
export type Filter = object | {} | undefined;
export type GroupFilter = { $and: Filter } | { $or: Filter };
export type FieldFilter = object | string[] | "*" | "";
export type AscOrDesc = 1 | -1 | boolean;
export type OrderBy = { key: string, asc: AscOrDesc }[] | { [key: string]: AscOrDesc }[] | { [key: string]: AscOrDesc } | string | string[];
        
export type SelectParams = {
    select?: FieldFilter;
    limit?: number;
    offset?: number;
    orderBy?: OrderBy;
    expectOne?: boolean;
}
export type UpdateParams = {
    returning?: FieldFilter;
    onConflictDoNothing?: boolean;
    fixIssues?: boolean;
    multi?: boolean;
}
export type InsertParams = {
    returning?: FieldFilter;
    onConflictDoNothing?: boolean;
    fixIssues?: boolean;
}
export type DeleteParams = {
    returning?: FieldFilter;
};
export type TxCB = {
    (t: DBObj): (any | void | Promise<(any | void)>)
};
export type JoinMaker = (filter?: object, select?: FieldFilter, options?: SelectParams) => any;


export type Items = {
     h?: Array<string>;
     id?: number;
     name?: string;
};
export type Items_Filter = Items | object | { $and: (Items | object)[] } | { $or: (Items | object)[] } 
export type Items2 = {
     hh?: Array<string>;
     id?: number;
     items_id?: number;
     name?: string;
};
export type Items2_Filter = Items2 | object | { $and: (Items2 | object)[] } | { $or: (Items2 | object)[] } 
export type Items3 = {
     h?: Array<string>;
     id?: number;
     name?: string;
};
export type Items3_Filter = Items3 | object | { $and: (Items3 | object)[] } | { $or: (Items3 | object)[] } 
export type Items4 = {
     h?: Array<string>;
     id?: number;
     name?: string;
};
export type Items4_Filter = Items4 | object | { $and: (Items4 | object)[] } | { $or: (Items4 | object)[] } 
export type Planes = {
     flight_number?: string;
     id?: number;
     last_updated?: number;
     x?: number;
     y?: number;
};
export type Planes_Filter = Planes | object | { $and: (Planes | object)[] } | { $or: (Planes | object)[] } 
export type Table = {
     id?: string;
};
export type Table_Filter = Table | object | { $and: (Table | object)[] } | { $or: (Table | object)[] } 
export type Transaction = {
     id?: string;
};
export type Transaction_Filter = Transaction | object | { $and: (Transaction | object)[] } | { $or: (Transaction | object)[] } 
export type V_items = {
     id?: number;
     name?: string;
};
export type V_items_Filter = V_items | object | { $and: (V_items | object)[] } | { $or: (V_items | object)[] } 

export type DBO_items = {
    getColumns: () => Promise<any[]>;
   find: (filter?:  Items_Filter , selectParams?: SelectParams) => Promise<Items[] | any[]>;
   findOne: (filter?:  Items_Filter , selectParams?: SelectParams) => Promise<Items | any>;
   subscribe: (filter:  Items_Filter , params: SelectParams, onData: (items: Items[]) => any) => Promise<{ unsubscribe: () => any }>;
   subscribeOne: (filter:  Items_Filter , params: SelectParams, onData: (item: Items) => any) => Promise<{ unsubscribe: () => any }>;
   count: (filter?:  Items_Filter ) => Promise<number>;
   update: (filter:  Items_Filter , newData: Items, params?: UpdateParams) => Promise<Items | void>;
   upsert: (filter:  Items_Filter , newData: Items, params?: UpdateParams) => Promise<Items | void>;
   insert: (data: (Items | Items[]), params?: InsertParams) => Promise<Items | void>;
   delete: (filter?:  Items_Filter , params?: DeleteParams) => Promise<Items | void>; 
};
export type DBO_items2 = {
    getColumns: () => Promise<any[]>;
   find: (filter?:  Items2_Filter , selectParams?: SelectParams) => Promise<Items2[] | any[]>;
   findOne: (filter?:  Items2_Filter , selectParams?: SelectParams) => Promise<Items2 | any>;
   subscribe: (filter:  Items2_Filter , params: SelectParams, onData: (items: Items2[]) => any) => Promise<{ unsubscribe: () => any }>;
   subscribeOne: (filter:  Items2_Filter , params: SelectParams, onData: (item: Items2) => any) => Promise<{ unsubscribe: () => any }>;
   count: (filter?:  Items2_Filter ) => Promise<number>;
   update: (filter:  Items2_Filter , newData: Items2, params?: UpdateParams) => Promise<Items2 | void>;
   upsert: (filter:  Items2_Filter , newData: Items2, params?: UpdateParams) => Promise<Items2 | void>;
   insert: (data: (Items2 | Items2[]), params?: InsertParams) => Promise<Items2 | void>;
   delete: (filter?:  Items2_Filter , params?: DeleteParams) => Promise<Items2 | void>; 
};
export type DBO_items3 = {
    getColumns: () => Promise<any[]>;
   find: (filter?:  Items3_Filter , selectParams?: SelectParams) => Promise<Items3[] | any[]>;
   findOne: (filter?:  Items3_Filter , selectParams?: SelectParams) => Promise<Items3 | any>;
   subscribe: (filter:  Items3_Filter , params: SelectParams, onData: (items: Items3[]) => any) => Promise<{ unsubscribe: () => any }>;
   subscribeOne: (filter:  Items3_Filter , params: SelectParams, onData: (item: Items3) => any) => Promise<{ unsubscribe: () => any }>;
   count: (filter?:  Items3_Filter ) => Promise<number>;
   update: (filter:  Items3_Filter , newData: Items3, params?: UpdateParams) => Promise<Items3 | void>;
   upsert: (filter:  Items3_Filter , newData: Items3, params?: UpdateParams) => Promise<Items3 | void>;
   insert: (data: (Items3 | Items3[]), params?: InsertParams) => Promise<Items3 | void>;
   delete: (filter?:  Items3_Filter , params?: DeleteParams) => Promise<Items3 | void>; 
};
export type DBO_items4 = {
    getColumns: () => Promise<any[]>;
   find: (filter?:  Items4_Filter , selectParams?: SelectParams) => Promise<Items4[] | any[]>;
   findOne: (filter?:  Items4_Filter , selectParams?: SelectParams) => Promise<Items4 | any>;
   subscribe: (filter:  Items4_Filter , params: SelectParams, onData: (items: Items4[]) => any) => Promise<{ unsubscribe: () => any }>;
   subscribeOne: (filter:  Items4_Filter , params: SelectParams, onData: (item: Items4) => any) => Promise<{ unsubscribe: () => any }>;
   count: (filter?:  Items4_Filter ) => Promise<number>;
   update: (filter:  Items4_Filter , newData: Items4, params?: UpdateParams) => Promise<Items4 | void>;
   upsert: (filter:  Items4_Filter , newData: Items4, params?: UpdateParams) => Promise<Items4 | void>;
   insert: (data: (Items4 | Items4[]), params?: InsertParams) => Promise<Items4 | void>;
   delete: (filter?:  Items4_Filter , params?: DeleteParams) => Promise<Items4 | void>; 
};
export type DBO_planes = {
    getColumns: () => Promise<any[]>;
   find: (filter?:  Planes_Filter , selectParams?: SelectParams) => Promise<Planes[] | any[]>;
   findOne: (filter?:  Planes_Filter , selectParams?: SelectParams) => Promise<Planes | any>;
   subscribe: (filter:  Planes_Filter , params: SelectParams, onData: (items: Planes[]) => any) => Promise<{ unsubscribe: () => any }>;
   subscribeOne: (filter:  Planes_Filter , params: SelectParams, onData: (item: Planes) => any) => Promise<{ unsubscribe: () => any }>;
   count: (filter?:  Planes_Filter ) => Promise<number>;
   update: (filter:  Planes_Filter , newData: Planes, params?: UpdateParams) => Promise<Planes | void>;
   upsert: (filter:  Planes_Filter , newData: Planes, params?: UpdateParams) => Promise<Planes | void>;
   insert: (data: (Planes | Planes[]), params?: InsertParams) => Promise<Planes | void>;
   delete: (filter?:  Planes_Filter , params?: DeleteParams) => Promise<Planes | void>; 
};
export type DBO_table = {
    getColumns: () => Promise<any[]>;
   find: (filter?:  Table_Filter , selectParams?: SelectParams) => Promise<Table[] | any[]>;
   findOne: (filter?:  Table_Filter , selectParams?: SelectParams) => Promise<Table | any>;
   subscribe: (filter:  Table_Filter , params: SelectParams, onData: (items: Table[]) => any) => Promise<{ unsubscribe: () => any }>;
   subscribeOne: (filter:  Table_Filter , params: SelectParams, onData: (item: Table) => any) => Promise<{ unsubscribe: () => any }>;
   count: (filter?:  Table_Filter ) => Promise<number>;
   update: (filter:  Table_Filter , newData: Table, params?: UpdateParams) => Promise<Table | void>;
   upsert: (filter:  Table_Filter , newData: Table, params?: UpdateParams) => Promise<Table | void>;
   insert: (data: (Table | Table[]), params?: InsertParams) => Promise<Table | void>;
   delete: (filter?:  Table_Filter , params?: DeleteParams) => Promise<Table | void>; 
};
export type DBO_transaction = {
    getColumns: () => Promise<any[]>;
   find: (filter?:  Transaction_Filter , selectParams?: SelectParams) => Promise<Transaction[] | any[]>;
   findOne: (filter?:  Transaction_Filter , selectParams?: SelectParams) => Promise<Transaction | any>;
   subscribe: (filter:  Transaction_Filter , params: SelectParams, onData: (items: Transaction[]) => any) => Promise<{ unsubscribe: () => any }>;
   subscribeOne: (filter:  Transaction_Filter , params: SelectParams, onData: (item: Transaction) => any) => Promise<{ unsubscribe: () => any }>;
   count: (filter?:  Transaction_Filter ) => Promise<number>;
   update: (filter:  Transaction_Filter , newData: Transaction, params?: UpdateParams) => Promise<Transaction | void>;
   upsert: (filter:  Transaction_Filter , newData: Transaction, params?: UpdateParams) => Promise<Transaction | void>;
   insert: (data: (Transaction | Transaction[]), params?: InsertParams) => Promise<Transaction | void>;
   delete: (filter?:  Transaction_Filter , params?: DeleteParams) => Promise<Transaction | void>; 
};
export type DBO_v_items = {
    getColumns: () => Promise<any[]>;
   find: (filter?:  V_items_Filter , selectParams?: SelectParams) => Promise<V_items[] | any[]>;
   findOne: (filter?:  V_items_Filter , selectParams?: SelectParams) => Promise<V_items | any>;
   subscribe: (filter:  V_items_Filter , params: SelectParams, onData: (items: V_items[]) => any) => Promise<{ unsubscribe: () => any }>;
   subscribeOne: (filter:  V_items_Filter , params: SelectParams, onData: (item: V_items) => any) => Promise<{ unsubscribe: () => any }>;
   count: (filter?:  V_items_Filter ) => Promise<number>; 
};

export type JoinMakerTables = {
 items: JoinMaker;
 items2: JoinMaker;
 items3: JoinMaker;
};

export type DBObj = {
 items: DBO_items;
 items2: DBO_items2;
 items3: DBO_items3;
 items4: DBO_items4;
 planes: DBO_planes;
 table: DBO_table;
 transaction: DBO_transaction;
 v_items: DBO_v_items;
 leftJoin: JoinMakerTables;
 innerJoin: JoinMakerTables;
 leftJoinOne: JoinMakerTables;
 innerJoinOne: JoinMakerTables;
 tx: (t: TxCB) => Promise<any | void> ;
};
