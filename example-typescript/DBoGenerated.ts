/* This file was generated by Prostgles 
* Tue, 14 Jul 2020 20:06:03 GMT 
*/

export type FieldFilter = object | string[] | "*" | "";
export type OrderBy = { key: string, asc: boolean }[] | { [key: string]: boolean }[] | string | string[];
        
export type SelectParams = {
    select?: FieldFilter;
    limit?: number;
    offset?: number;
    orderBy?: OrderBy;
    expectOne?: boolean;
}
export type UpdateParams = {
    returning?: FieldFilter;
    onConflictDoNothing?: boolean;
    fixIssues?: boolean;
    multi?: boolean;
}
export type InsertParams = {
    returning?: FieldFilter;
    onConflictDoNothing?: boolean;
    fixIssues?: boolean;
}
export type DeleteParams = {
    returning?: FieldFilter;
};

type Pixels = {
     id?: number;
     rgb?: string;
     drawn?: boolean;
     xy?: string;
     last_updated?: number;
     blb?: string;
};

type DBO_pixels = {
    find: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Pixels[]>;
   findOne: (filter?: object, selectParams?: SelectParams , param3_unused?:any) => Promise<Pixels>;
   subscribe: (filter: object, params: SelectParams, onData: (items: Pixels[]) => any) => { unsubscribe: () => any };
   count: (filter?: object) => Promise<number>;
   update: (filter: object, newData: Pixels, params?: UpdateParams) => Promise<void | Pixels>;
   upsert: (filter: object, newData: Pixels, params?: UpdateParams) => Promise<void | Pixels>;
   insert: (data: (Pixels | Pixels[]), params?: InsertParams) => Promise<void | Pixels>;
   delete: (filter: object, params?: DeleteParams) => Promise<void | Pixels>; 
};

export type DBObj = {
 pixels: DBO_pixels;
};
